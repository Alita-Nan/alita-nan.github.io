[{"categories":null,"content":"Leraning Operating System ","date":"2021-07-06","objectID":"/operating-system/:0:0","tags":null,"title":"Operating System","uri":"/operating-system/"},{"categories":null,"content":"一、写在前面： ​ 我计划在这个暑假学习有关操作系统的知识。在查阅了有关的资料后我打算跟随书籍进行学习。我选择的书籍是国外的教材的译本，原书名Operating System-Three Easy Pieces(中名是：操作系统导论）。如果你的英语水平过关的话，那么可以到下面的连接下载它的电子原版。 https://github.com/csukuangfj/Operating-Systems-Three-Easy-Pieces-all-in-one-pdf ","date":"2021-07-06","objectID":"/operating-system/:1:0","tags":null,"title":"Operating System","uri":"/operating-system/"},{"categories":null,"content":"二、为什么要根据这本书学？ 视频 OR 书籍 ​ 其实我在决定之前找了很多的问答和视频。但操作系统的学习本身并不是一个有趣的过程。所以在我看来找到一个能激发求知欲的视频或是一本书显然是至关重要的。在购买译本之前我勉强的看了一些原本的电子版。发现确实如推荐的人说的一般，行文较为有趣。这里引用知乎上的一篇回答： https://www.zhihu.com/question/31863104/answer/54334367 为什么不选择经典的黑皮书呢？ 我觉得黑皮书系列虽然硬核，但是并不太适合初学者。 ","date":"2021-07-06","objectID":"/operating-system/:2:0","tags":null,"title":"Operating System","uri":"/operating-system/"},{"categories":null,"content":"三、有和打算？ 顺带干点别的 ​ 操作系统导论一书除了语言较为轻松意外。还会根据要讲解的内容给出对应的c语言代码。由于我的c语言只停留在指针的指针、数组的指针、指针的数组这个大圈中。所以我并不打算抄书上的代码。但不跟着实现的话又觉得浪费了作者的苦心。所以我打算另寻它路。 Go语言 Go语言是类c语言。而且和C一样，它也具有指针的操作。区别是Go语言的指针较C语言要简单很多。 const ( sLoop = 1000 BLoop = 100000 ) type google struct {} // 此处可以在worker中开启两个goroutine，但是那样做似乎就用不了context。 // 如果你想在worker中开启两个goroutine的话，那么你可以使用sync.WaitGroup包。 // 或者在main函数中创建一个channel，等待两个goroutine结束时发送信号。如果接收到两个信号则表明都完成了任务。 func (g google) worker(count *int, ctx context.Context, loop int) context.Context{ ctx, cancel := context.WithCancel(ctx) go func() { for i := 0; i \u003c loop; i++ { *count++ } cancel() }() return ctx } func main() { g1 := google{} g2 := google{} var result1 int ctx1 := g1.worker(\u0026result1, context.Background(), sLoop) ctx2 := g2.worker(\u0026result1, context.Background(), sLoop) \u003c- ctx1.Done() \u003c- ctx2.Done() fmt.Println(\"Small loop's result: \" + strconv.Itoa(result1)) var result int ctx1 = g1.worker(\u0026result, context.Background(), BLoop) ctx2 = g2.worker(\u0026result, context.Background(), BLoop) \u003c- ctx1.Done() \u003c- ctx2.Done() fmt.Println(\"Large loop's result: \" + strconv.Itoa(result)) } 输出： Small loop's result: 2000 Large loop's result: 142830 上面便是我仿照着书里的例子写的小Demo。目的是测试并发伴随的问题。（代码并不简洁，甚至可以算得上糟糕。） ","date":"2021-07-06","objectID":"/operating-system/:3:0","tags":null,"title":"Operating System","uri":"/operating-system/"},{"categories":null,"content":"四、坚持 ​ 行文的幽默并不能覆盖这是一个严肃的、具有逻辑性的专业知识。加之我加入了一些项目的工作。所以我必须保证在完成项目的同时不落下操作系统学习的进度。 ","date":"2021-07-06","objectID":"/operating-system/:4:0","tags":null,"title":"Operating System","uri":"/operating-system/"},{"categories":null,"content":"Before 关于Docker的学习我是在官方给出的入门教程中进行的。我非常推荐新手跟着官方给出的教程学习。 一是质量有得保证。二是官方推出的入门教程较其他更为简单且有趣，不易产生劝退的念头。 具体的教程在Docker的官方网站上即可找到。(参照下面的链接) https://www.docker.com/101-tutorial 需要注意的是我是用的Docker Desktop进行docker的一系列操作。而该教程也是面向Docker Desktop的。 关于教程中的“坑” 需要提前声明的是，此处的坑并不是指官方的教程有问题，而是指新手在跟随教程走时可能犯的错误。 ","date":"2021-06-29","objectID":"/%E5%85%B3%E4%BA%8Edocker%E7%9A%84%E8%B8%A9%E5%9D%91/:0:0","tags":null,"title":"关于Docker的踩坑","uri":"/%E5%85%B3%E4%BA%8Edocker%E7%9A%84%E8%B8%A9%E5%9D%91/"},{"categories":null,"content":"一、Docker Build 好慢 我遇到的第一个坑是在教程的第三部分。 docker教程目录 这个章节的主题是Our Application。教程在给出一个与既定程序匹配的dockerfile后会引导你用 docker build -t getting-started . 命令构建容器。进行到这里一切都非常的顺利，但是构建的过程却异常的缓慢。 由于这是一个基于Node.js的App，所以在构建容器时还需要提供相应的环境依赖（这样才能保证程序能运行）。 问题就出在这里，当你敲下回车后会发现它在构建时是从外网上拉取的依赖。而后我在网上查阅资料试图修改dockerfile，让其从国内的镜像网上拉取。但都失败了（失败的原因目前还未可知）。于是我只能忍痛购买一个梯子（先前推荐的那个梯子我一年的免费试用已经到期。） 它家的梯子是我在对比了很多我找到的梯子中费用最低的。而且它家的客服非常给力，会远程帮你解决问题。一般来说这个梯子能满足绝大部分的“跨海”需求。 在搭好梯子之后，重新敲下上面的代码你会发现它的速度快了很多。原本需要半小时（可能更长）缩短为几分钟！ 这里需要补充的一点是我一开始怀疑是教程给出的dockerfile有问题。毕竟其原文中写道If you’ve created Dockerfiles before, you might see a few flaws in the Dockerfile below. 但是在解决了问题以及跟着教程前进之后我个人觉得所谓的缺陷可能是它没有把运行所需的依赖和程序本身分离开来。在教程的Multi-Contanier Apps中写道In general, each container should do one thing and do it well. 即一个容器需要专注于一件事。 ","date":"2021-06-29","objectID":"/%E5%85%B3%E4%BA%8Edocker%E7%9A%84%E8%B8%A9%E5%9D%91/:1:0","tags":null,"title":"关于Docker的踩坑","uri":"/%E5%85%B3%E4%BA%8Edocker%E7%9A%84%E8%B8%A9%E5%9D%91/"},{"categories":null,"content":"二、Bind Mounts需要注意的事 随着教程的深入我来到了Using Bind Mounts。我查阅了一下，这个的中文翻译似乎都是直译，即绑定挂载。这个章节是教你如何在不重新构建容器的情况下修改代码并让容器运行修改后的代码。 这个章节中教程给出了一段指令： docker run -dp 3000:3000 \\ -w /app -v \"$(pwd):/app\" \\ node:12-alpine \\ sh -c \"yarn install \u0026\u0026 yarn run dev\" -w /app的意义在于指定命令针对的工作的目录。(原文是：sets the “working directory” or the current directory that the command will run from) -v \"$(pwd):/app\"的意思是将主机中的容器内的当前目录绑定到/app的工作目录下。（原文是：bind mount the current directory from the host in the container into the/app directory) 如果你不在app路径下执行此命令的话，你会发现容器并不能正常运行。在Desktop中点击启动后一会就会自动推出。 所以这里笔者建议你使用powerShell，然后在powershell中移动到app所在的位置再执行此命令。 ","date":"2021-06-29","objectID":"/%E5%85%B3%E4%BA%8Edocker%E7%9A%84%E8%B8%A9%E5%9D%91/:2:0","tags":null,"title":"关于Docker的踩坑","uri":"/%E5%85%B3%E4%BA%8Edocker%E7%9A%84%E8%B8%A9%E5%9D%91/"},{"categories":null,"content":"三、命令的“误会” 这是一个小乌龙，权当记录。 解决了上述问题之后来到了Muti-Contaniner Apps一章中 这一章中教程给出了一段代码供操作容器内运行的Mysql数据库 docker exec -it \u003cmysql-container-id\u003e mysql -p 这段命令是在容器中连接mysql数据库。但值得注意的是，代码中的尖括号应该是起隔离的作用。在实际操作中不能输入这对尖括号！！！！！！ ","date":"2021-06-29","objectID":"/%E5%85%B3%E4%BA%8Edocker%E7%9A%84%E8%B8%A9%E5%9D%91/:3:0","tags":null,"title":"关于Docker的踩坑","uri":"/%E5%85%B3%E4%BA%8Edocker%E7%9A%84%E8%B8%A9%E5%9D%91/"},{"categories":null,"content":"翻墙 如果你会修改hosts文件的话，你会发现虽然能解燃眉之急，但是你会发现网页加载的速度不稳定，严重的时候甚至会 断线。而且在Docker官方推出的入门中，由于墙的问题会导致build的时间异常的漫长。究其原因是那个教程的镜像是 在外网上，所以拉取速度会很慢。 不是打广告！ 在研究了很久之后我找到了一款不错的vpn： https://soulss.cloud/auth/register?code=sWHd window端也有教程，而且是一年免费试用！！！ 根据站内的教程按部就班的操作即可！ ","date":"2021-06-27","objectID":"/visit_foreign_websites/:0:0","tags":null,"title":"Visit_foreign_websites","uri":"/visit_foreign_websites/"},{"categories":null,"content":"START DOCKER ","date":"2021-06-27","objectID":"/start_docker/:0:0","tags":null,"title":"StartDocker","uri":"/start_docker/"},{"categories":null,"content":"写在前面 ​ 由于我在此之前并未接触过Linux操作系统。加之我在Docker官网找到了适合Window系统的Docker -Desktop。 加之Micorsofe推出了WSL2（按照我粗浅的理解是一个虚拟机，让windows系统上能再安装一个Linux子系统），所 以我在官方文档的指导下完成了WSL2的安装。这是具体的安装文档： https://docs.microsoft.com/zh-cn/windows/wsl/install-win10。 ","date":"2021-06-27","objectID":"/start_docker/:0:1","tags":null,"title":"StartDocker","uri":"/start_docker/"},{"categories":null,"content":"Docker的使用 ​ 在安装完成后，需要先给docker更换镜像。这里推荐一个镜像源： https://www.daocloud.io/mirror ​ 在该网站注册后拉到最下面会有一个私有的加速地址。将其复制后粘贴到如下图标红的地址： 至此准备工作便已经完成了！ ","date":"2021-06-27","objectID":"/start_docker/:0:2","tags":null,"title":"StartDocker","uri":"/start_docker/"}]